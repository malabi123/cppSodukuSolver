#include <iostream>
#include <chrono>           // For timing
#include "Table.h"
#include "TableBuilder.h"

using namespace std;
using namespace std::chrono;

int main() {
    cout << "==================== SUDOKU SOLVER BENCHMARK ====================\n\n";

    auto runSudoku = [](Table* t, int* values, int n, const string& label) {
        cout << "Solving " << label << "...\n";
        auto start = high_resolution_clock::now();

        t->SetValuesInSquares(values, n);
        t->solve();
        t->solve();

        auto end = high_resolution_clock::now();
        auto duration = duration_cast<milliseconds>(end - start).count();
        cout << "✔ " << label << " solved in " << duration << " ms.\n\n";
        t->PrintTable();
        };


    /// 123->              1 2 3 [In Values Arrays]
    /// 1-Row			  /  |  \
    /// 2-Col           Row Col Value
    /// 3-Value


    // --------------------- 4x4 Sudoku ---------------------
    Table* t4 = TableBuilder::BuildTable(eSize::SizeFour);
    int values4[] = { 121,133,212,343,422,431 };
    runSudoku(t4, values4, 6, "4x4 Sudoku");

    ///   +---+---+---+---+
    /// 1 |   | 1 | 3 |   |
    ///   +---+---+---+---+
    /// 2 | 2 |   |   |   |
    ///   +---+---+---+---+
    /// 3 |   |   |   | 3 |
    ///   +---+---+---+---+
    /// 4 |   | 2 | 1 |   |
    ///   +---+---+---+---+

    // --------------------- 6x6 Sudoku ---------------------
    Table* t6 = TableBuilder::BuildTable(eSize::SizeSix);
    int values6[] = { 116,122,145,163,315,353,426,452,543,554,566,613,636 };
    runSudoku(t6, values6, 13, "6x6 Sudoku");

    ///    +---+---+---+---+---+---+
    ///  1 | 6 | 2 |   | 5 |   | 3 |
    ///    +---+---+---+---+---+---+
    ///  2 |   |   |   |   |   |   |
    ///    +---+---+---+---+---+---+
    ///  3 | 5 |   |   |   | 3 |   |
    ///    +---+---+---+---+---+---+
    ///  4 |   | 6 |   |   | 2 |   |
    ///    +---+---+---+---+---+---+
    ///  5 |   |   |   | 3 | 4 | 6 |
    ///    +---+---+---+---+---+---+
    ///  6 | 3 |   | 6 |   |   |   |
    ///    +---+---+---+---+---+---+

    // --------------------- 9x9 Sudoku ---------------------
    Table* t9 = TableBuilder::BuildTable(eSize::SizeNine);
    int values9[] = { 123,155,169,235,277,328,334,342,357,399,465,512,559,594,646,714,752,766,779,783,831,878,949,954,987 };
    runSudoku(t9, values9, 25, "9x9 Sudoku");

    ///    +---+---+---+---+---+---+---+---+---+
    ///  1 |   | 3 |   |   | 5 | 9 |   |   |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  2 |   |   | 5 |   |   |   | 7 |   |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  3 |   | 8 | 4 | 2 | 7 |   |   |   | 9 |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  4 |   |   |   |   |   | 5 |   |   |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  5 | 2 |   |   |   | 9 |   |   |   | 4 |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  6 |   |   |   | 6 |   |   |   |   |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  7 | 4 |   |   |   | 2 | 6 | 9 | 3 |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  8 |   |   | 1 |   |   |   | 8 |   |   |
    ///    +---+---+---+---+---+---+---+---+---+
    ///  9 |   |   |   | 9 | 4 |   |   | 7 |   |
    ///    +---+---+---+---+---+---+---+---+---+

    // --------------------- 16x16 Sudoku ---------------------

    /// 10203/010203->              1/01  02 03 [In Values Arrays]
    /// 01/1-Row   	   			     /     |   \
    /// 02-Col                     Row    Col  Value
    /// 03-Value

    Table* t16 = TableBuilder::BuildTable(eSize::SizeSixteen);
    int values16[] = {
    10313, 10514, 10707, 10909, 11103, 11516, 11611,
    20211, 20307, 20403, 21501, 21614,
    30315, 30511, 30602, 30712, 30805, 30916, 31114, 31406, 31507,
    40308, 40709, 40906, 41011, 41101, 41313,
    50304, 50513, 50711, 50807, 50912, 51008, 51310, 51416, 51602,
    60212, 60516, 60601, 60715, 60810, 61003, 61102, 61311, 61413, 61508, 61607,
    70407, 70706, 71010, 71113, 71314, 71401,
    80111, 80316, 80512, 80608, 80714, 81001, 81309, 81404,
    90103, 90301, 90611, 90808, 91316,
    100415, 100603, 100704, 100814, 101105, 101209, 101410, 101511,
    110114, 110311, 110509, 110613, 110702, 111407, 111505,
    120213, 120310, 120409, 120505, 120607, 120716, 121108, 121504, 121612,
    130207, 130416, 130701, 130908, 131110, 131312, 131515,
    140104, 140202, 140408, 140609, 140703, 141016, 141107, 141514,
    150112, 150303, 150508, 150804, 151115, 151405,
    160101, 161014, 161302, 161513
    };
    runSudoku(t16, values16, 115, "16x16 Sudoku");

    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  1 |    |    | 13 |    | 14 |    |  7 |    |  9 |    |  3 |    |    |    | 16 | 11 |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  2 |    | 11 |  7 |  3 |    |    |    |    |    |    |    |    |    |    |  1 | 14 |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  3 |    |    | 15 |    | 11 |  2 | 12 |  5 | 16 |    | 14 |    |    |  6 |  7 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  4 |    |    |  8 |    |    |    |  9 |    |  6 | 11 |  1 |    | 13 |    |    |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  5 |    |    |  4 |    | 13 |    | 11 |  7 | 12 |  8 |    |    | 10 | 16 |    |  2 |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  6 |    | 12 |    |    | 16 |  1 | 15 | 10 |    |  3 |  2 |    | 11 | 13 |  8 |  7 |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  7 |    |    |    |  7 |    |    |  6 |    |    | 10 | 13 |    | 14 |  1 |    |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  8 | 11 |    | 16 |    | 12 |  8 | 14 |    |    |  1 |    |    |  9 |  4 |    |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    ///  9 |  3 |    |  1 |    |    | 11 |    |  8 |    |    |    |    | 16 |    |    |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 10 |    |    |    | 15 |    |  3 |  4 | 14 |    |    |  5 |  9 |    | 10 | 11 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 11 | 14 |    | 11 |    |  9 | 13 |  2 |    |    |    |    |    |    |  7 |  5 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 12 |    | 13 | 10 |  9 |  5 |  7 | 16 |    |    |    |  8 |    |    |    |  4 | 12 |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 13 |    |  7 |    | 16 |    |    |  1 |    |  8 |    | 10 |    | 12 |    | 15 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 14 |  4 |  2 |    |  8 |    |  9 |  3 |    |    | 16 |  7 |    |    |    | 14 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 15 | 12 |    |  3 |    |  8 |    |    |  4 |    |    | 15 |    |    |  5 |    |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
    /// 16 |  1 |    |    |    |    |    |    |    |    | 14 |    |    |  2 |    | 13 |    |
    ///    +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

    cout << "=================================================================\n";
    cout << "All Sudoku puzzles solved successfully!\n";
    return 0;
}